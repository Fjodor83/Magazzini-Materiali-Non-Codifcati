@page "/assegna-ruolo"
@using MagazziniMaterialiCLient.Models
@using MagazziniMaterialiCLient.Services
@inject AccountService AccountService

<h3>Assegna Ruolo</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="@userRole" OnValidSubmit="HandleAssegnaRuolo">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" @bind-Value="userRole.Username" class="form-control" />
    </div>
    <div class="form-group">
        <label for="role">Ruolo:</label>
        <InputText id="role" @bind-Value="userRole.Role" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Assegna Ruolo</button>
</EditForm>

@code {
    private UserRole userRole = new UserRole();
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    private async Task HandleAssegnaRuolo()
    {
        try
        {
            // Resetta i messaggi prima di ogni tentativo
            successMessage = string.Empty;
            errorMessage = string.Empty;

            await AccountService.AssignRole(userRole);

            // Messaggio di successo
            successMessage = "Ruolo assegnato con successo!";
        }
        catch (Exception ex)
        {
            // Messaggio di errore
            errorMessage = $"Errore nell'assegnazione del ruolo: {ex.Message}";
        }
    }
}
