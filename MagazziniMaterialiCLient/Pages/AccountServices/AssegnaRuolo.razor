@page "/assegna-ruolo"
@using MagazziniMaterialiCLient.Models
@using MagazziniMaterialiCLient.Services
@using Microsoft.AspNetCore.Authorization
@inject AccountService AccountService
@attribute [Authorize(Roles = "Admin")]

<div class="container mt-4">
    <h3>Assegna Ruolo</h3>
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <EditForm Model="@userRole" OnValidSubmit="HandleAssegnaRuolo">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="username" class="form-label">Username:</label>
            <InputText id="username" @bind-Value="userRole.Username" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="role" class="form-label">Ruolo:</label>
            <InputSelect id="role" @bind-Value="userRole.Role" class="form-select">
                <option value="">Seleziona un ruolo</option>
                <option value="Admin">Admin</option>
                <option value="Operatore">Operatore</option>
                <option value="Manager">Manager</option>
            </InputSelect>
        </div>
        <button type="submit" class="btn btn-primary">Assegna Ruolo</button>
    </EditForm>
</div>

@code {
    private UserRole userRole = new UserRole();
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    private async Task HandleAssegnaRuolo()
    {
        try
        {
            successMessage = string.Empty;
            errorMessage = string.Empty;
            await AccountService.AssignRole(userRole);
            successMessage = "Ruolo assegnato con successo!";
            userRole = new UserRole(); // Reset the form
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore nell'assegnazione del ruolo: {ex.Message}";
        }
    }
}