@page "/login"
@using Blazored.LocalStorage
@using MagazziniMaterialiCLient.Models
@using MagazziniMaterialiCLient.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Login</h3>
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label for="email" class="form-label">Email:</label>
                            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password:</label>
                            <InputText id="password" @bind-Value="loginModel.Password" class="form-control" type="password" />
                        </div>
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Login</button>
                        </div>
                    </EditForm>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3" role="alert">
                            @errorMessage
                        </div>
                    }
                    <div class="mt-3 text-center">
                        <p>Non hai un account? <a href="/registra-operatore">Registrati</a></p>
                        <p>Hai bisogno di aiuto? <a href="/help">Richiedi assistenza</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        try
        {
            var response = await Http.PostAsJsonAsync("api/Account/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                await LocalStorage.SetItemAsync("authToken", token);
                await ((CustomAuthenticationStateProvider)AuthStateProvider).MarkUserAsAuthenticated(token);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Login fallito. Controlla le tue credenziali e riprova.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Si è verificato un errore durante il login: {ex.Message}";
        }
    }
}
