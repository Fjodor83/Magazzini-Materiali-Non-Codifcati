@page "/registra-operatore"
@using MagazziniMaterialiCLient.Models.Entity.DTOs
@using MagazziniMaterialiCLient.Services
@using Microsoft.AspNetCore.Authorization
@inject AccountService AccountService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<div class="container mt-4">
    <h3>Registra Operatore</h3>
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <EditForm Model="@registraOperatoreDto" OnValidSubmit="HandleRegistrazione">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <InputText id="email" @bind-Value="registraOperatoreDto.Email" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password:</label>
            <InputText id="password" @bind-Value="registraOperatoreDto.Password" class="form-control" type="password" />
        </div>
        <button type="submit" class="btn btn-primary">Registra</button>
    </EditForm>
</div>

@code {
    private RegistraOperatoreDto registraOperatoreDto = new RegistraOperatoreDto();
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    private async Task HandleRegistrazione()
    {
        try
        {
            successMessage = string.Empty;
            errorMessage = string.Empty;
            var operatoreId = await AccountService.RegistraOperatore(registraOperatoreDto);
            successMessage = $"Operatore registrato con successo! ID Operatore: {operatoreId}";
            registraOperatoreDto = new RegistraOperatoreDto(); // Reset the form
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante la registrazione: {ex.Message}";
        }
    }
}
