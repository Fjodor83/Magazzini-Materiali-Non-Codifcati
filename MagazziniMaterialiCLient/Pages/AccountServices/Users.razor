@page "/users"
@using MagazziniMaterialiCLient.Models.Entity.DTOs
@using MagazziniMaterialiCLient.Services
@using Microsoft.AspNetCore.Authorization
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Elenco degli Utenti</h3>
        <button class="btn btn-success" @onclick="NavigateToCreateUser">
            <i class="fas fa-plus"></i> Aggiungi Utente
        </button>
    </div>

    @if (users == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Caricamento utenti...</span>
            </div>
        </div>
    }
    else if (users.Count == 0)
    {
        <div class="alert alert-info" role="alert">
            Nessun utente registrato.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID Utente</th>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Ruoli</th>
                        <th>Azioni</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in paginatedUsers)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>@string.Join(", ", user.Roles)</td>
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="() => EditUser(user.UserName)">
                                    <i class="fas fa-edit"></i> Modifica
                                </button>
                                <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteUser(user.UserName)">
                                    <i class="fas fa-trash-alt"></i> Elimina
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <nav aria-label="Paginazione utenti">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="javascript:void(0)" @onclick="PreviousPage">Precedente</a>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(currentPage == i ? "active" : "")">
                        <a class="page-link" href="javascript:void(0)" @onclick="() => GoToPage(i)">@i</a>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <a class="page-link" href="javascript:void(0)" @onclick="NextPage">Successivo</a>
                </li>
            </ul>
        </nav>
    }
</div>

@code {
    private List<UserDto> users;
    private List<UserDto> paginatedUsers;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await UserService.GetUsersAsync();
        totalPages = (int)Math.Ceiling((double)users.Count / pageSize);
        PaginateUsers();
    }

    private void PaginateUsers()
    {
        paginatedUsers = users
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            PaginateUsers();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            PaginateUsers();
        }
    }

    private void GoToPage(int page)
    {
        currentPage = page;
        PaginateUsers();
    }

    private void NavigateToCreateUser()
    {
        NavigationManager.NavigateTo("/registra-operatore");
    }

    private void EditUser(string userName)
    {
        NavigationManager.NavigateTo($"/edit/user/{userName}");
    }

    private async Task DeleteUser(string userName)
    {
        
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Sei sicuro di voler eliminare questo utente?" });
        if (confirmed)
        {
            await UserService.DeleteUserAsync(userName);
            await LoadUsers();  
        }
    }

}
