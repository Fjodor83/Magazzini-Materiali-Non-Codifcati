@page "/magazzini/materiali/{MagazzinoId:int}"
@using MagazziniMaterialiCLient.Models.Entity.DTOs
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/magazzini">Magazzini</a></li>
            <li class="breadcrumb-item active" aria-current="page">Materiali nel Magazzino</li>
        </ol>
    </nav>

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Materiali nel Magazzino</h2>
        <button class="btn btn-success" @onclick="RegisterMateriale">
            <i class="fas fa-plus"></i> Registra Nuovo Materiale
        </button>
    </div>

    @if (materiali == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Caricamento in corso...</span>
            </div>
        </div>
    }
    else if (!materiali.Any())
    {
        <div class="alert alert-info" role="alert">
            Non ci sono materiali registrati in questo magazzino. Usa il pulsante "Registra Nuovo Materiale" per aggiungerne uno.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead class="table-light">
                    <tr>
                        <th>Codice Materiale</th>
                        <th>Descrizione</th>
                        <th>Azioni</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var materiale in materiali)
                    {
                        <tr>
                            <td>@materiale.CodiceMateriale</td>
                            <td>@materiale.Descrizione</td>
                            <td>
                                <div class="btn-group" role="group">
                                    <button class="btn btn-outline-primary btn-sm" @onclick="() => EditMateriale(materiale.CodiceMateriale)">
                                        <i class="fas fa-edit"></i> Modifica
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteMateriale(materiale.CodiceMateriale)">
                                        <i class="fas fa-trash-alt"></i> Elimina
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    [Parameter]
    public int MagazzinoId { get; set; }

    private List<MaterialeDTO> materiali;

    protected override async Task OnInitializedAsync()
    {
        await LoadMateriali();
    }

    private async Task LoadMateriali()
    {
        try
        {
            materiali = await HttpClient.GetFromJsonAsync<List<MaterialeDTO>>($"api/Magazzino/MaterialiByMagazzino/{MagazzinoId}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Errore nel caricamento dei materiali: {ex.Message}");
        }
    }

    private void RegisterMateriale()
    {
        NavigationManager.NavigateTo($"/magazzini/materiali/register/{MagazzinoId}");
    }

    private void EditMateriale(string codiceMateriale)
    {
        NavigationManager.NavigateTo($"/materiale/edit/{codiceMateriale}?magazzinoId={MagazzinoId}");
    }

    private async Task DeleteMateriale(string codiceMateriale)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Sei sicuro di voler eliminare questo materiale dal magazzino?");
        if (confirmed)
        {
            try
            {
                await HttpClient.DeleteAsync($"api/Magazzino/RemoveMateriale/{MagazzinoId}/{codiceMateriale}");
                await LoadMateriali();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Errore nell'eliminazione del materiale: {ex.Message}");
            }
        }
    }
}