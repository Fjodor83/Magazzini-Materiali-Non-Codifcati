@page "/materiale/edit/{CodiceMateriale}"
@using MagazziniMaterialiCLient.Models.Entity
@using MagazziniMaterialiCLient.Models.Entity.DTOs
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Modifica Materiale</h3>

<EditForm Model="materiale" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Codice Materiale:</label>
        <InputText @bind-Value="materiale.CodiceMateriale" class="form-control" disabled="true" />
    </div>

    <div class="form-group">
        <label>Descrizione:</label>
        <InputText @bind-Value="materiale.Descrizione" class="form-control" />
    </div>
    <div class="form-group">
        <label>Note:</label>
        <InputText @bind-Value="materiale.Note" class="form-control" />
    </div>
    <!-- Campi nascosti per Immagini e Classificazioni -->
    <input type="hidden" value="@materiale.Immagini" />
    <input type="hidden" value="@materiale.Classificazioni" />

    <button type="submit" class="btn btn-primary">Salva Modifiche</button>
    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter] 
    public string CodiceMateriale { get; set; }
    private MaterialeDTO materiale = new MaterialeDTO
        {
            Immagini = new List<MaterialeImmagine>(), // Inizializza la collezione vuota
            Classificazioni = new List<Classificazione>() // Inizializza la collezione vuota
        };

    protected override async Task OnInitializedAsync()
    {
        materiale = await Http.GetFromJsonAsync<MaterialeDTO>($"api/Materiale/{CodiceMateriale}");
    }

    private async Task HandleValidSubmit()
    {
        await Http.PutAsJsonAsync($"api/Materiale/{CodiceMateriale}", materiale);
        NavigationManager.NavigateTo("/materiali");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/materiali");
    }

}
