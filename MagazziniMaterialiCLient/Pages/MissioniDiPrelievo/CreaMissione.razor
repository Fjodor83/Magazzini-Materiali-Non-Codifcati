@page "/missioni/crea"
@using MagazziniMaterialiCLient.Models.Entity.DTOs
@using MagazziniMaterialiCLient.Services
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <h2>Crea Nuova Missione di Prelievo</h2>

    <EditForm Model="missione" OnValidSubmit="CreaMissioni">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3">
            <label for="TipologiaDestinazione">Tipologia Destinazione</label>
            <InputText id="TipologiaDestinazione" class="form-control" @bind-Value="missione.TipologiaDestinazione" />
        </div>

        <div class="form-group mb-3">
            <label for="Descrizione">Descrizione</label>
            <InputTextArea id="Descrizione" class="form-control" @bind-Value="missione.Descrizione" />
        </div>

       <div class="form-group mb-3">
    <label for="OperatoreId">Operatore</label>
    <select id="OperatoreId" class="form-control" @bind="missione.OperatoreId">
        <option value="">-- Seleziona Operatore --</option>
        @if (users != null)
        {
            @foreach (var user in users.Where(u => u.Roles.Contains("Operatore")))
            {
                <option value="@user.Id">@user.Email </option>
            }
        }
    </select>
</div>




        <button type="submit" class="btn btn-success">
            <i class="fas fa-check"></i> Crea Missione
        </button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Annulla">
            <i class="fas fa-times"></i> Annulla
        </button>
    </EditForm>
</div>

@code {
    private CreaMissioneDto missione = new CreaMissioneDto();
    private List<UserDto> users;

    protected override async Task OnInitializedAsync()
    {
        
        users = await UserService.GetUsersAsync(); // Metodo per ottenere gli utenti da Identity
    }

    private async Task CreaMissioni()
    {
        if (string.IsNullOrWhiteSpace(missione.TipologiaDestinazione) || string.IsNullOrWhiteSpace(missione.OperatoreId))
        {
            // Mostra un messaggio di errore se mancano dei campi obbligatori
            await JSRuntime.InvokeVoidAsync("alert", "Compila tutti i campi obbligatori.");
            return;
        }

        // Trova l'email dell'operatore selezionato
        var selectedUser = users.FirstOrDefault(u => u.Id == missione.OperatoreId);
        if (selectedUser != null)
        {
            missione.OperatoreEmail = selectedUser.Email;
        }

        try
        {
            // Effettua la chiamata HTTP al server
            var response = await HttpClient.PostAsJsonAsync("https://localhost:7089/api/missioni/crea-missione", missione);

            if (response.IsSuccessStatusCode)
            {
                // Naviga verso la pagina di conferma o mostra un messaggio di successo
                NavigationManager.NavigateTo("/missioni");
            }
            else
            {
                // Gestisci gli errori della risposta
                var errorMessage = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Errore nella creazione della missione: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            // Gestione dell'eccezione nel caso di errori di rete o altro
            await JSRuntime.InvokeVoidAsync("alert", $"Errore: {ex.Message}");
        }
    }

    private void Annulla()
    {
        NavigationManager.NavigateTo("/missioni");
    }

    public class CreaMissioneDto
    {
        public string TipologiaDestinazione { get; set; }
        public string Descrizione { get; set; }
        public string OperatoreId { get; set; }
        public string OperatoreEmail { get; set; }  
    }
}
